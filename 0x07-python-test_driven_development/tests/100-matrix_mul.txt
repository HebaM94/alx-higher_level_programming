The ``100-matrix_mul`` module
=============================
This module provides a function to multiply two matrices
``matrix_mul(m_a, m_b)``

Using ``matrix_mul``
--------------------

This is a text file in reStructuredText format.  First import
``text_indentation`` from the ``100-matrix_mul`` module:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now use it:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10], [15, 22]]

::
    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10]]

The floats numbers can be used so int and floats  can be mixed together:
::
    >>> m_a = [
    ...  [1.2, 2.5, 3.25],
    ...  [-4.6, 5.3, -6.4]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]


::
    >>> m_a = [
    ... [1, 2.5, 3],
    ... [-4.6, 5, -6.4]
    ... ]

    >>> print(matrix_mul(m_a, m_b))
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

The two arguments must be provided, otherwise, a TypeError will be raised:

::
    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists of lists, 
otherwise a TypeError will be raised:

::
    >>> print(matrix_mul("list", [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::
    >>> print(matrix_mul([[1, 2], [3, 4]], "list"))
    Traceback (most recent call last):
    TypeError: m_b must be a list

::
    >>> print(matrix_mul("list1", "list2"))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::
    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::
    >>> print(matrix_mul([1, 2], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::
    >>> print(matrix_mul([[1, 2], [3, 4]], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

::
    >>> print(matrix_mul([1, 2], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

The lists must contain integers or floats, otherwise TypeError will be raised:

::
    >>> print(matrix_mul([[1, "numberr"]], [[3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

::
    >>> print(matrix_mul([[1, 2]], [[{"num": 1}, 3,5]]))
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

::
    >>> print(matrix_mul([[1, "number"]], [[{"num": 1}, 3,5]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

All ‘rows’ in ``m_a`` and ``m_b`` should be of the same size,
otherwise, a TypeError will be raised:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must should be of the same size

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

ValueErrors
===========

Nethir of ``m_a`` nor ``m_b`` can be empty, otherwise a ValueError will be raised:

::
    >>> print(matrix_mul([], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::
    >>> print(matrix_mul([[1, 2], [3, 4]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty

::
    >>> print(matrix_mul([[]], []))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

If m_a and m_b can’t be multiplied like in case rows number of ``m_a``
!= to columns count  of ``m_b``, a ValueError will be raised:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

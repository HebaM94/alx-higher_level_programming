The ``101-lazy_matrix_mul`` module
==================================
This module provides a function to multiply two matrices
``lazy_matrix_mul(m_a, m_b)``

Using ``lazy_matrix_mul``
-------------------------

This is a text file in reStructuredText format.  First import
``text_indentation`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

::
    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]]

The floats numbers can be used so int and floats  can be mixed together:
::
    >>> m_a = [
    ...  [1.2, 2.5, 3.25],
    ...  [-4.6, 5.3, -6.4]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 22.15  29.26]
     [-84.45 -20.02]]

::
    >>> m_a = [
    ... [1, 2.5, 3],
    ... [-4.6, 5, -6.4]
    ... ]

    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 19.35  27.5 ]
     [-83.58 -21.34]]

The two arguments must be provided, otherwise, a TypeError will be raised:

::
    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists of lists, 
otherwise a ValueError will be raised:

::
    >>> print(lazy_matrix_mul("list", [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], "list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::
    >>> print(lazy_matrix_mul("list1", "list2"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::
    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]

::
    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11

If any of the parameters is None, TypeError will be raised:

::
    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

The lists must contain integers or floats, otherwise ValueError
or TypeError will be raised:

::
    >>> print(lazy_matrix_mul([[1, "numberr"]], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::
    >>> print(lazy_matrix_mul([[1, 2]], [[{"num": 1}, 3,5]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

::
    >>> print(lazy_matrix_mul([[1, "number"]], [[{"num": 1}, 3,5]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

All ‘rows’ in ``m_a`` and ``m_b`` should be of the same size,
otherwise, a ValueError will be raised:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

ValueErrors
===========

Nethir of ``m_a`` nor ``m_b`` can be empty, otherwise a ValueError will be raised:

::
    >>> print(lazy_matrix_mul([], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

::
    >>> print(lazy_matrix_mul([[]], []))
    [0.]

If m_a and m_b can’t be multiplied like in case rows number of ``m_a``
!= to columns count  of ``m_b``, a ValueError will be raised:

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

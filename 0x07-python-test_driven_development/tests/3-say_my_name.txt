The ``3-say_my_name`` module
=============================
This module provides a function to print names
``say_my_name(first_name, last_name="")``

Using ``say_my_name``
---------------------

This is a text file in reStructuredText format.  First import
``say_my_name`` from the ``3-say_my_name`` module:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Now use it:

::
   >>> say_my_name("Mikasa", "Ackraman")
   My name is Mikasa Ackraman

::
    >>> say_my_name("Dong-min", "Lee")
    My name is Dong-min Lee

The ```last_name``` paramater is empty by default if not provided:

::
    >>> say_my_name("Mikasa")
    My name is Mikasa
    
Invalid Names
=============

The parameters ``first_name`` and ``last_name``` must be strings, otherwise,
a TypeError will be raised:

::
    >>> say_my_name(1, "Yeager")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::
    >>> say_my_name("Eren", ["Armin", "Mikasa"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

The error will raised for ``first_name`` only since it's checked first:

::
    >>> say_my_name({"Eren": 1, "Mikasa": 2}, 7.7)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::
    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

First name must be provided:

::
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

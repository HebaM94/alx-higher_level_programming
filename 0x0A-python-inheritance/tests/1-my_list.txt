The ``1-my_list`` module
=============================
This module provides a class that implement sorted printing for
inherited class

Using ``MyList``
-------------------

This is a text file in reStructuredText format.  First import
``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

case 1: already sorted list:

::
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]


case 2: using object which is not inistantiated:

::
    >>> my_listx.print_sorted()
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    NameError: name 'my_listx' is not defined


case 3: passing an unordered list:

::
    >>> a = [1, 9, 4]
    >>> my_list = MyList(a)
    >>> my_list.print_sorted()
    [1, 4, 9]


case 4: passing an empty list:

::
    >>> a = []
    >>> my_list = MyList(a)
    >>> my_list.print_sorted()
    []


case 5: passing a list with one number only:

::
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    [1]
    >>> print(my_list)
    [1]


case 6: passing a list with duplicated numbers:

::
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(1)
    >>> my_list.append(1)
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    [1, 1, 1, 1]


case 8: passing a list of positive and negative numbers:

::
    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(1)
    >>> my_list.append(-1)
    >>> my_list.append(51)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-5, -1, 1, 5, 51]
